{"ast":null,"code":"var _jsxFileName = \"/Users/caffeinatedchi/Documents/Got-battle-react/src/components/searchbar.jsx\";\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setBackendData, onChange, setSuggestions } from '../actions/searchbar';\nimport { setBattlesData } from '../actions/battlecards';\nimport Autosuggest from 'react-autosuggest';\n\nclass SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getSuggestions = (value, id) => {\n      const escapedValue = value.trim().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      if (escapedValue === '') return [];\n      const regex = new RegExp(escapedValue, 'i');\n      this.props.setSuggestions(this.props[id].backenddata.filter(location => regex.test(location)), id);\n    };\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.props.onChange(newValue, event.target.id);\n    };\n\n    this.onSubmitBattleData = event => {\n      event.preventDefault();\n      debugger;\n      const querydata = {\n        location: event.target.locationid.value,\n        region: event.target.regionid.value,\n        year: event.target.yearid.value,\n        name: event.target.battlenameid.value\n      };\n      const queryparams = Object.keys(querydata).map(key => {\n        if (querydata[key]) return `${encodeURIComponent(key)}=${encodeURIComponent(querydata[key])}`;\n      }).filter(item => item).join('&');\n      this.props.setBattlesData(queryparams);\n    };\n  }\n\n  async componentDidMount() {\n    // Fetch required unique data list for autocomplete suggestion\n    this.props.setBackendData('locationid');\n    this.props.setBackendData('battlenameid');\n    this.props.setBackendData('regionid');\n  }\n  /**\n   * Get list of suggestion when typed into input fields\n   * here input fields are differentiate with id.\n   * @param {String} value\n   * @param {String} id\n   * @returns Sets unique set of suggestions for given id\n   */\n\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"card shadow-sm d-flex flex-column needs-validation\",\n      onSubmit: this.onSubmitBattleData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mt-3 d-flex row no-gutters mx-md-5 mx-2 flex-wrap justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group col-md mx-2 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      suggestions: this.props.locationid.suggestion,\n      onSuggestionsFetchRequested: ({\n        event,\n        value\n      }) => {\n        this.getSuggestions(value, 'locationid');\n      },\n      onSuggestionsClearRequested: () => {\n        this.props.setSuggestions([], 'locationid');\n      },\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: suggestion => React.createElement(\"div\", {\n        id: \"locationid\",\n        className: \"p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, suggestion),\n      inputProps: {\n        placeholder: 'Location',\n        id: 'locationid',\n        value: this.props.locationid.value,\n        className: 'form-control',\n        onChange: this.onChange\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group col-md mx-2 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      suggestions: this.props.battlenameid.suggestion,\n      onSuggestionsFetchRequested: ({\n        event,\n        value\n      }) => {\n        this.getSuggestions(value, 'battlenameid');\n      },\n      onSuggestionsClearRequested: () => {\n        this.props.setSuggestions([], 'battlenameid');\n      },\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: suggestion => React.createElement(\"div\", {\n        id: \"battlenameid\",\n        className: \"p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, suggestion),\n      inputProps: {\n        placeholder: 'Battle Name',\n        id: 'battlenameid',\n        value: this.props.battlenameid.value,\n        className: 'form-control',\n        onChange: this.onChange\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group col-md mx-2 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      className: \"form-control\",\n      id: \"yearid\",\n      placeholder: \"Year\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group col-md mx-2 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      suggestions: this.props.regionid.suggestion,\n      onSuggestionsFetchRequested: ({\n        event,\n        value\n      }) => {\n        this.getSuggestions(value, 'regionid');\n      },\n      onSuggestionsClearRequested: () => {\n        this.props.setSuggestions([], 'regionid');\n      },\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: suggestion => React.createElement(\"div\", {\n        id: \"regionid\",\n        className: \"p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, suggestion),\n      inputProps: {\n        placeholder: 'Region',\n        id: 'regionid',\n        value: this.props.regionid.value,\n        className: 'form-control',\n        onChange: this.onChange\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \" btn btn-primary btn-sm w-25 mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Search\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  locationid: state.searchbar.locationid,\n  battlenameid: state.searchbar.battlenameid,\n  regionid: state.searchbar.regionid\n});\n\nexport default connect(mapStateToProps, {\n  setBackendData,\n  onChange,\n  setSuggestions,\n  setBattlesData\n})(SearchBar);","map":{"version":3,"sources":["/Users/caffeinatedchi/Documents/Got-battle-react/src/components/searchbar.jsx"],"names":["React","Component","connect","setBackendData","onChange","setSuggestions","setBattlesData","Autosuggest","SearchBar","getSuggestions","value","id","escapedValue","trim","replace","regex","RegExp","props","backenddata","filter","location","test","event","newValue","method","target","onSubmitBattleData","preventDefault","querydata","locationid","region","regionid","year","yearid","name","battlenameid","queryparams","Object","keys","map","key","encodeURIComponent","item","join","componentDidMount","render","suggestion","placeholder","className","mapStateToProps","state","searchbar"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setBackendData, onChange, setSuggestions } from '../actions/searchbar';\nimport { setBattlesData } from '../actions/battlecards';\nimport Autosuggest from 'react-autosuggest';\n\nclass SearchBar extends Component {\n  async componentDidMount() {\n    // Fetch required unique data list for autocomplete suggestion\n    this.props.setBackendData('locationid');\n    this.props.setBackendData('battlenameid');\n    this.props.setBackendData('regionid');\n  }\n\n  /**\n   * Get list of suggestion when typed into input fields\n   * here input fields are differentiate with id.\n   * @param {String} value\n   * @param {String} id\n   * @returns Sets unique set of suggestions for given id\n   */\n  getSuggestions = (value, id) => {\n    const escapedValue = value.trim().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    if (escapedValue === '') return [];\n\n    const regex = new RegExp(escapedValue, 'i');\n    this.props.setSuggestions(\n      this.props[id].backenddata.filter(location => regex.test(location)),\n      id,\n    );\n  };\n\n  onChange = (event, { newValue, method }) => {\n    this.props.onChange(newValue, event.target.id);\n  };\n\n  onSubmitBattleData = event => {\n    event.preventDefault();\n    debugger;\n    const querydata = {\n      location: event.target.locationid.value,\n      region: event.target.regionid.value,\n      year: event.target.yearid.value,\n      name: event.target.battlenameid.value,\n    };\n    const queryparams = Object.keys(querydata)\n      .map(key => {\n        if (querydata[key])\n          return `${encodeURIComponent(key)}=${encodeURIComponent(\n            querydata[key],\n          )}`;\n      })\n      .filter(item => item)\n      .join('&');\n    this.props.setBattlesData(queryparams);\n  };\n\n  render() {\n    return (\n      <form\n        className=\"card shadow-sm d-flex flex-column needs-validation\"\n        onSubmit={this.onSubmitBattleData}\n      >\n        <div className=\"mt-3 d-flex row no-gutters mx-md-5 mx-2 flex-wrap justify-content-center\">\n          <div className=\"form-group col-md mx-2 \">\n            <Autosuggest\n              suggestions={this.props.locationid.suggestion}\n              onSuggestionsFetchRequested={({ event, value }) => {\n                this.getSuggestions(value, 'locationid');\n              }}\n              onSuggestionsClearRequested={() => {\n                this.props.setSuggestions([], 'locationid');\n              }}\n              getSuggestionValue={suggestion => suggestion}\n              renderSuggestion={suggestion => (\n                <div id=\"locationid\" className=\"p-2\">\n                  {suggestion}\n                </div>\n              )}\n              inputProps={{\n                placeholder: 'Location',\n                id: 'locationid',\n                value: this.props.locationid.value,\n                className: 'form-control',\n                onChange: this.onChange,\n              }}\n            />\n          </div>\n          <div className=\"form-group col-md mx-2 \">\n            <Autosuggest\n              suggestions={this.props.battlenameid.suggestion}\n              onSuggestionsFetchRequested={({ event, value }) => {\n                this.getSuggestions(value, 'battlenameid');\n              }}\n              onSuggestionsClearRequested={() => {\n                this.props.setSuggestions([], 'battlenameid');\n              }}\n              getSuggestionValue={suggestion => suggestion}\n              renderSuggestion={suggestion => (\n                <div id=\"battlenameid\" className=\"p-2\">\n                  {suggestion}\n                </div>\n              )}\n              inputProps={{\n                placeholder: 'Battle Name',\n                id: 'battlenameid',\n                value: this.props.battlenameid.value,\n                className: 'form-control',\n                onChange: this.onChange,\n              }}\n            />\n          </div>\n          <div className=\"form-group col-md mx-2 \">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"yearid\"\n              placeholder=\"Year\"\n            />\n          </div>\n          <div className=\"form-group col-md mx-2 \">\n            <Autosuggest\n              suggestions={this.props.regionid.suggestion}\n              onSuggestionsFetchRequested={({ event, value }) => {\n                this.getSuggestions(value, 'regionid');\n              }}\n              onSuggestionsClearRequested={() => {\n                this.props.setSuggestions([], 'regionid');\n              }}\n              getSuggestionValue={suggestion => suggestion}\n              renderSuggestion={suggestion => (\n                <div id=\"regionid\" className=\"p-2\">\n                  {suggestion}\n                </div>\n              )}\n              inputProps={{\n                placeholder: 'Region',\n                id: 'regionid',\n                value: this.props.regionid.value,\n                className: 'form-control',\n                onChange: this.onChange,\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          <button className=\" btn btn-primary btn-sm w-25 mb-3\">Search</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  locationid: state.searchbar.locationid,\n  battlenameid: state.searchbar.battlenameid,\n  regionid: state.searchbar.regionid,\n});\n\nexport default connect(mapStateToProps, {\n  setBackendData,\n  onChange,\n  setSuggestions,\n  setBattlesData,\n})(SearchBar);\n"]},"metadata":{},"sourceType":"module"}